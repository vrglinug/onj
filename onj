#!/usr/bin/python

import sys, signal, os, subprocess

PROBLEMDIR = 'problemdir'

#Verdicts
verdict = {'CORRECT' : 0, 'COMPILE_ERROR' : 1, 'WRONG' : 2, 'TIME_EXCEEDED' : 3, 'ILLEGAL_FILE' : 4}

#Execution time limit
TIME_LIMIT = 2

#Set this to True to see debug messages
DEBUG = False

p = None

def alarm_callback(signum, frame):
	p.terminate()
	if(DEBUG): print "Time out"
	sys.exit(verdict['TIME_EXCEEDED'])

def compare_files(a, b):
	fileA = open(a, "r")
	fileB = open(b, "r")

	linesA = fileA.readlines()
	linesB = fileB.readlines()

	fileA.close()
	fileB.close()

	if(len(linesA) != len(linesB)):
		return False

	for i in range(0, len(linesA)):
		lineA = linesA[i].strip()
		lineB = linesB[i].strip()
		if(lineA != lineB):
			return False

	return True

sourcefile = sys.argv[1]
problem = sys.argv[2]
path = "/".join(sourcefile.split("/")[:-1])
ext = sourcefile.split(".")[1]	

if ext not in ["c", "cpp", "java", "cs", "py", "rb"]:
	if(DEBUG): print "Illegal file"
	sys.exit(verdict['ILLEGAL_FILE'])

#Extend this for added language support
if(ext == "cpp"):
	compile = "g++ -lm %s -o %s 2> /dev/null" % (sourcefile, path + "/a.out")
elif(ext == "c"):
	compile = "gcc -lm %s -o %s 2> /dev/null" % (sourcefile, path + "/a.out")
elif(ext == "java"):
	compile = "javac %s 2> /dev/null" % (sourcefile)
elif(ext == "cs"):
	compile = "csc %s /out:%s > /dev/null 2> /dev/null" % (sourcefile, path + "/a.exe")

if(ext in ["c", "cpp", "java", "cs"]):
	if(DEBUG): print compile
	#--------------Compile--------------------
	r = os.system(compile)
	if(r):
		if(DEBUG): print "Compile Error"
		sys.exit(verdict['COMPILE_ERROR'])

file = sourcefile.split("/")[-1]
infile = PROBLEMDIR + "/" + problem + "/in"
outfile = path + "/op"

#Extend this for added language support
if(ext in ["c", "cpp"]):
	run = "./a.out"
elif(ext == "rb"):
	run = ["ruby", file]
elif(ext == "py"):
	run = ["python", file]
elif(ext == "java"):
	file = file.split(".")[0]
	run = ["java", file]
elif(ext == "cs"):
	file = file.split(".")[0]
	run = ["mono", "a.exe"]

#--------------Run------------------------
signal.signal(signal.SIGALRM, alarm_callback)
signal.alarm(TIME_LIMIT)
if(DEBUG): print "Running..."
p = subprocess.Popen(run, stdin=open(infile,"r"), stdout=open(outfile,"w"), stderr=open("/dev/null", "w"), cwd=path)
r = os.waitpid(p.pid, 0)[1]
signal.alarm(0)

if(DEBUG): print "Exit status : %d" % r
if(r != 0):
	if(DEBUG): print "Runtime Error"
	sys.exit(verdict['WRONG'])

outputProduced = path + "/op"
outputExpected = "./" + PROBLEMDIR + "/" + problem + "/out"

if( compare_files(outputProduced, outputExpected) == True ):
	if(DEBUG): print "Correct"
	sys.exit(verdict['CORRECT'])
else:
	if(DEBUG): print "Wrong"
	sys.exit(verdict['WRONG'])
